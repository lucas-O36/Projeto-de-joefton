import tkinter as tk
from tkinter import messagebox
class Calculadora:
    
    def __init__(self, master):
        self.master = master
        master.title("Calculadora Elegante")
        master.geometry("300x450") # Tamanho inicial da janela
        master.resizable(False, False) # Impede o redimensionamento da janela
        master.configure(bg='#2e2e2e') # Cor de fundo escura

        self.expressao = ""
        self.entrada = tk.StringVar()

        # Configuração da fonte para o display e botões
        fonte_display = ('Arial', 24, 'bold')
        fonte_botoes = ('Arial', 18, 'bold')

        # Campo de Entrada (Display)
        self.display = tk.Entry(master, textvariable=self.entrada, width=15, font=fonte_display,
                                bd=0, insertwidth=2, justify='right', bg='#3a3a3a', fg='#ffffff',
                                highlightbackground='#5a5a5a', highlightthickness=2)
        self.display.grid(row=0, column=0, columnspan=4, padx=10, pady=20, sticky='nsew')
        self.display.focus_set()

        # Frame para os botões (para melhor organização e padding)
        botoes_frame = tk.Frame(master, bg='#2e2e2e')
        botoes_frame.grid(row=1, column=0, columnspan=4, padx=5, pady=5, sticky='nsew')

        # Dicionário para cores dos botões
        cores_botoes = {
            'operador': '#ff9500', # Laranja
            'numero': '#505050',  # Cinza escuro
            'especial': '#d4d4d2', # Cinza claro
            'igual': "#4183af"    # Laranja (mesmo que operador)
        }
        fg_cores = {
            'operador': '#ffffff',
            'numero': '#ffffff',
            'especial': '#000000',
            'igual': '#ffffff'
        }

        # Definição dos botões e suas posições
        botoes = [
            # Linha 1
            ('C', 1, 0, 'especial'), ('+/-', 1, 1, 'especial'), ('%', 1, 2, 'especial'), ('/', 1, 3, 'operador'),
            # Linha 2
            ('7', 2, 0, 'numero'), ('8', 2, 1, 'numero'), ('9', 2, 2, 'numero'), ('*', 2, 3, 'operador'),
            # Linha 3
            ('4', 3, 0, 'numero'), ('5', 3, 1, 'numero'), ('6', 3, 2, 'numero'), ('-', 3, 3, 'operador'),
            # Linha 4
            ('1', 4, 0, 'numero'), ('2', 4, 1, 'numero'), ('3', 4, 2, 'numero'), ('+', 4, 3, 'operador'),
            # Linha 5
            ('0', 5, 0, 'numero'), ('.', 5, 2, 'numero'), ('=', 5, 3, 'igual')
        ]

        # Criar e posicionar os botões
        for (texto, linha, coluna, tipo_btn) in botoes:
            bg_cor = cores_botoes[tipo_btn]
            fg_cor = fg_cores[tipo_btn]
            btn_sticky = 'nsew'

            if texto == '0':
                btn = tk.Button(botoes_frame, text=texto, font=fonte_botoes, bg=bg_cor, fg=fg_cor,
                                command=lambda t=texto: self.clicar(t), bd=0, relief='flat', padx=10, pady=10)
                btn.grid(row=linha, column=coluna, columnspan=2, padx=5, pady=5, sticky=btn_sticky)
            elif texto == '=':
                btn = tk.Button(botoes_frame, text=texto, font=fonte_botoes, bg=bg_cor, fg=fg_cor,
                                command=self.calcular, bd=0, relief='flat', padx=10, pady=10)
                btn.grid(row=linha, column=coluna, padx=5, pady=5, sticky=btn_sticky)
            elif texto == 'C':
                btn = tk.Button(botoes_frame, text=texto, font=fonte_botoes, bg=bg_cor, fg=fg_cor,
                                command=self.limpar, bd=0, relief='flat', padx=10, pady=10)
                btn.grid(row=linha, column=coluna, padx=5, pady=5, sticky=btn_sticky)
            elif texto == '+/-':
                btn = tk.Button(botoes_frame, text=texto, font=fonte_botoes, bg=bg_cor, fg=fg_cor,
                                command=self.inverter_sinal, bd=0, relief='flat', padx=10, pady=10)
                btn.grid(row=linha, column=coluna, padx=5, pady=5, sticky=btn_sticky)
            elif texto == '%':
                btn = tk.Button(botoes_frame, text=texto, font=fonte_botoes, bg=bg_cor, fg=fg_cor,
                                command=self.porcentagem, bd=0, relief='flat', padx=10, pady=10)
                btn.grid(row=linha, column=coluna, padx=5, pady=5, sticky=btn_sticky)
            else:
                btn = tk.Button(botoes_frame, text=texto, font=fonte_botoes, bg=bg_cor, fg=fg_cor,
                                command=lambda t=texto: self.clicar(t), bd=0, relief='flat', padx=5, pady=5)
                btn.grid(row=linha, column=coluna, padx=5, pady=5, sticky=btn_sticky)

            # Ajuste de layout para as células dos botões no frame
            botoes_frame.grid_rowconfigure(linha, weight=1)
            botoes_frame.grid_columnconfigure(coluna, weight=1)

        # Ajustar a coluna do ponto para alinhar com os outros botões da linha 5
        botoes_frame.grid_columnconfigure(2, weight=1)

        # Configurar o redimensionamento das linhas e colunas para a janela principal
        master.grid_rowconfigure(0, weight=1) # Linha do display
        master.grid_rowconfigure(1, weight=5) # Linha do frame de botões
        for i in range(4): # 4 colunas
            master.grid_columnconfigure(i, weight=1)

    def clicar(self, texto):
        if self.expressao in ["Erro", "Divisão por Zero"]:
            self.expressao = "" # Limpa a expressão se houver um erro anterior
        self.expressao += texto
        self.entrada.set(self.expressao)

    def limpar(self):
        self.expressao = ""
        self.entrada.set("")

    def calcular(self):
        try:
            # Substitui o símbolo de porcentagem para cálculo correto se necessário
            # Ex: "50%*2" -> "0.5*2". Se for só "50%", vira "0.5".
            expressao_para_eval = self.expressao.replace('%', '/100*')
            if expressao_para_eval.endswith('/100*'):
                expressao_para_eval = expressao_para_eval[:-1] # Remove o último '*' se for só porcentagem

            resultado = str(eval(expressao_para_eval))
            self.entrada.set(resultado)
            self.expressao = resultado
        except ZeroDivisionError:
            self.entrada.set("Divisão por Zero")
            self.expressao = ""
        except Exception:
            self.entrada.set("Erro")
            self.expressao = ""
            messagebox.showerror("Erro de Cálculo", "Expressão inválida ou incompleta.")

    def inverter_sinal(self):
        try:
            if self.expressao and self.expressao not in ["Erro", "Divisão por Zero"]:
                valor_atual = float(eval(self.expressao))
                self.expressao = str(-valor_atual)
                self.entrada.set(self.expressao)
            elif self.entrada.get() and self.entrada.get() not in ["Erro", "Divisão por Zero"]:
                valor_atual = float(self.entrada.get())
                self.expressao = str(-valor_atual)
                self.entrada.set(self.expressao)
        except Exception:
            self.entrada.set("Erro")
            self.expressao = ""

    def porcentagem(self):
        try:
            if self.expressao and self.expressao not in ["Erro", "Divisão por Zero"]:
                valor_atual = float(eval(self.expressao))
                self.expressao = str(valor_atual / 100)
                self.entrada.set(self.expressao)
            elif self.entrada.get() and self.entrada.get() not in ["Erro", "Divisão por Zero"]:
                valor_atual = float(self.entrada.get())
                self.expressao = str(valor_atual / 100)
                self.entrada.set(self.expressao)
        except Exception:
            self.entrada.set("Erro")
            self.expressao = ""

def main():
    root = tk.Tk()
    calculadora_ui = Calculadora(root)
    root.mainloop()

if __name__ == "__main__":
    main()
